{
  "frontend_coder_examples": {
    "trigger_phrases": [
      "implement the UI for",
      "create frontend components",
      "build the React interface",
      "add TypeScript types for the UI"
    ],
    "implementation_patterns": {
      "payment_form": {
        "description": "Implement a complete payment form with Stripe and PayPal",
        "files_to_create": [
          "src/components/payment/PaymentForm.tsx",
          "src/components/payment/PaymentMethodSelector.tsx",
          "src/hooks/usePayment.ts",
          "src/types/payment.types.ts"
        ],
        "dependencies_to_add": [
          "@stripe/stripe-js",
          "@stripe/react-stripe-js",
          "@paypal/react-paypal-js"
        ],
        "reference_template": "payment-integration-template.tsx"
      },
      "dashboard_analytics": {
        "description": "Create analytics dashboard with charts",
        "files_to_create": [
          "src/components/dashboard/AnalyticsCard.tsx",
          "src/components/dashboard/RevenueChart.tsx",
          "src/contexts/AnalyticsContext.tsx"
        ],
        "dependencies_to_add": ["recharts", "date-fns"],
        "patterns_to_apply": [
          "Use React.memo for chart components",
          "Implement data fetching with SWR or React Query",
          "Add loading skeletons"
        ]
      }
    }
  },
  "backend_coder_examples": {
    "trigger_phrases": [
      "implement the API endpoints",
      "create backend services",
      "build the payment processing logic",
      "add database operations"
    ],
    "implementation_patterns": {
      "payment_api": {
        "description": "Implement secure payment processing endpoints",
        "files_to_create": [
          "src/routes/payments.ts",
          "src/services/stripeService.ts",
          "src/services/paypalService.ts",
          "src/middleware/auth.ts"
        ],
        "sql_schema": "sqlite-payment-schema.sql",
        "security_requirements": [
          "Validate all inputs",
          "Use parameterized queries",
          "Implement rate limiting",
          "Add webhook signature verification"
        ]
      },
      "subscription_management": {
        "description": "Build subscription lifecycle management",
        "implementation_steps": [
          "Create subscription CRUD endpoints",
          "Implement webhook handlers for payment events",
          "Add subscription status checking cron job",
          "Build upgrade/downgrade logic"
        ]
      }
    }
  },
  "test_coder_examples": {
    "trigger_phrases": [
      "write tests for",
      "add test coverage",
      "create unit tests",
      "implement e2e tests"
    ],
    "test_strategies": {
      "component_tests": {
        "tools": ["@testing-library/react", "@testing-library/user-event"],
        "patterns": [
          "Test user interactions, not implementation details",
          "Use MSW for API mocking",
          "Test accessibility with screen readers",
          "Verify error states and edge cases"
        ]
      },
      "api_tests": {
        "tools": ["supertest", "jest"],
        "patterns": [
          "Test all HTTP methods and status codes",
          "Verify request validation",
          "Test authentication and authorization",
          "Mock external services"
        ]
      }
    }
  },
  "velocity_coder_examples": {
    "trigger_phrases": ["quickly implement", "rapid prototype", "urgent fix for", "spike solution"],
    "rapid_patterns": {
      "mvp_approach": [
        "Use existing UI component libraries",
        "Leverage proven patterns from memory",
        "Skip non-critical features initially",
        "Use mock data for quick demos"
      ],
      "time_savers": {
        "authentication": "Use Clerk or Auth0 for rapid auth",
        "ui_components": "Use shadcn/ui or Ant Design",
        "database": "Start with SQLite, migrate later",
        "deployment": "Use Vercel or Netlify for instant deploy"
      }
    }
  },
  "automation_sequences": {
    "new_project_setup": {
      "steps": [
        "Create project with Vite/Next.js",
        "Apply ESLint v9 configuration",
        "Setup Husky and lint-staged",
        "Create GitHub Actions workflow",
        "Initialize git with proper .gitignore",
        "Add TypeScript configuration",
        "Setup test framework"
      ],
      "time_estimate": "30 minutes",
      "templates_to_use": [
        "eslint-v9-config-template.js",
        "github-actions-ci-template.yml",
        "husky-setup-script.sh"
      ]
    },
    "existing_project_upgrade": {
      "assessment_checklist": [
        "Check current ESLint version",
        "Verify git hooks presence",
        "Review CI/CD pipeline status",
        "Audit dependencies for vulnerabilities",
        "Check test coverage"
      ],
      "upgrade_priority": [
        "Fix security vulnerabilities first",
        "Update to ESLint v9 if needed",
        "Add missing git hooks",
        "Implement CI/CD if missing",
        "Improve test coverage"
      ]
    }
  },
  "decision_matrices": {
    "payment_provider_selection": {
      "stripe": {
        "best_for": ["SaaS subscriptions", "International payments", "Complex billing"],
        "setup_time": "2 days",
        "features": ["Subscriptions", "Invoicing", "Tax handling"]
      },
      "paypal": {
        "best_for": ["Consumer products", "One-time payments", "PayPal user base"],
        "setup_time": "1 day",
        "features": ["Express checkout", "PayPal Credit", "Venmo"]
      }
    },
    "testing_strategy": {
      "unit_tests": {
        "coverage_target": "80%",
        "focus_areas": ["Business logic", "Utilities", "Custom hooks"]
      },
      "integration_tests": {
        "coverage_target": "60%",
        "focus_areas": ["API endpoints", "Database operations", "External services"]
      },
      "e2e_tests": {
        "coverage_target": "Critical paths only",
        "focus_areas": ["User registration", "Payment flow", "Core features"]
      }
    }
  },
  "performance_optimizations": {
    "learned_patterns": [
      "Use React.memo for expensive components",
      "Implement virtual scrolling for long lists",
      "Lazy load routes and components",
      "Optimize images with next/image or lazy loading",
      "Use Web Workers for heavy computations",
      "Implement proper caching strategies"
    ]
  }
}
