# Cert-Manager Configuration for SSL/TLS Automation
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
  labels:
    cert-manager.io/disable-validation: "true"
---
# ClusterIssuer for Let's Encrypt Production
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: cert-manager
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: ssl-admin@hotelbooking.com
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    # HTTP01 solver for standard domains
    - http01:
        ingress:
          class: nginx
      selector:
        dnsNames:
        - 'hotelbooking.com'
        - '*.hotelbooking.com'
    # DNS01 solver for wildcard certificates
    - dns01:
        route53:
          region: us-east-1
          hostedZoneID: ${ROUTE53_HOSTED_ZONE_ID}
          # Use IRSA (IAM Roles for Service Accounts)
          # No access keys needed
      selector:
        dnsNames:
        - '*.hotelbooking.com'
        - '*.staging.hotelbooking.com'
        - '*.dev.hotelbooking.com'
---
# ClusterIssuer for Let's Encrypt Staging (for testing)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  namespace: cert-manager
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: ssl-admin@hotelbooking.com
    privateKeySecretRef:
      name: letsencrypt-staging-key
    solvers:
    - http01:
        ingress:
          class: nginx
---
# Production Certificate
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: hotel-booking-prod-tls
  namespace: hotel-booking-production
spec:
  secretName: hotel-booking-prod-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: hotelbooking.com
  dnsNames:
  - hotelbooking.com
  - www.hotelbooking.com
  - api.hotelbooking.com
  - admin.hotelbooking.com
  duration: 2160h # 90 days
  renewBefore: 720h # 30 days before expiry
  subject:
    organizations:
    - Hotel Booking Inc
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 4096
  usages:
  - digital signature
  - key encipherment
  - server auth
  - client auth
---
# Wildcard Certificate for subdomains
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: hotel-booking-wildcard-tls
  namespace: hotel-booking-production
spec:
  secretName: hotel-booking-wildcard-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: '*.hotelbooking.com'
  dnsNames:
  - '*.hotelbooking.com'
  - hotelbooking.com
  duration: 2160h
  renewBefore: 720h
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 4096
---
# Staging Environment Certificate
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: hotel-booking-staging-tls
  namespace: hotel-booking-staging
spec:
  secretName: hotel-booking-staging-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: staging.hotelbooking.com
  dnsNames:
  - staging.hotelbooking.com
  - '*.staging.hotelbooking.com'
  duration: 2160h
  renewBefore: 720h
---
# Ingress with TLS configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: hotel-booking-ingress
  namespace: hotel-booking-production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.hotelbooking.com";
spec:
  tls:
  - hosts:
    - hotelbooking.com
    - www.hotelbooking.com
    secretName: hotel-booking-prod-tls-secret
  - hosts:
    - api.hotelbooking.com
    secretName: hotel-booking-prod-tls-secret
  - hosts:
    - admin.hotelbooking.com
    secretName: hotel-booking-prod-tls-secret
  rules:
  # Main website
  - host: hotelbooking.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hotel-booking-active
            port:
              number: 80
  - host: www.hotelbooking.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hotel-booking-active
            port:
              number: 80
  # API
  - host: api.hotelbooking.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hotel-booking-api
            port:
              number: 3001
  # Admin panel
  - host: admin.hotelbooking.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: hotel-booking-admin
            port:
              number: 3002
---
# ServiceMonitor for cert-manager metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: cert-manager-metrics
  namespace: cert-manager
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cert-manager
  endpoints:
  - port: http-metrics
    interval: 30s
    path: /metrics
---
# Alerts for certificate expiry
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: cert-manager-alerts
  namespace: cert-manager
spec:
  groups:
  - name: cert-manager
    interval: 30s
    rules:
    - alert: CertificateExpiringSoon
      expr: certmanager_certificate_expiration_timestamp_seconds - time() < 7 * 24 * 60 * 60
      for: 1h
      labels:
        severity: warning
      annotations:
        summary: "Certificate expiring soon"
        description: "Certificate {{ $labels.name }} in namespace {{ $labels.namespace }} is expiring in less than 7 days"
    
    - alert: CertificateExpired
      expr: certmanager_certificate_expiration_timestamp_seconds - time() < 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Certificate has expired"
        description: "Certificate {{ $labels.name }} in namespace {{ $labels.namespace }} has expired"
    
    - alert: CertificateRenewalFailed
      expr: increase(certmanager_certificate_renewal_errors_total[1h]) > 0
      for: 15m
      labels:
        severity: critical
      annotations:
        summary: "Certificate renewal failed"
        description: "Certificate renewal for {{ $labels.name }} in namespace {{ $labels.namespace }} has failed"
---
# RBAC for cert-manager DNS01 solver
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager-route53
  namespace: cert-manager
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/cert-manager-route53
---
# External Secrets for certificate backup
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: certificate-backup
  namespace: hotel-booking-production
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
---
# Backup job for certificates
apiVersion: batch/v1
kind: CronJob
metadata:
  name: certificate-backup
  namespace: hotel-booking-production
spec:
  schedule: "0 2 * * *" # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: certificate-backup-sa
          containers:
          - name: backup
            image: amazon/aws-cli:latest
            command:
            - /bin/bash
            - -c
            - |
              # Get all certificates
              for cert in $(kubectl get certificates -n hotel-booking-production -o name); do
                cert_name=$(echo $cert | cut -d'/' -f2)
                secret_name=$(kubectl get $cert -n hotel-booking-production -o jsonpath='{.spec.secretName}')
                
                # Export certificate data
                kubectl get secret $secret_name -n hotel-booking-production -o json > /tmp/${cert_name}.json
                
                # Upload to S3
                aws s3 cp /tmp/${cert_name}.json s3://hotel-booking-backups/certificates/$(date +%Y%m%d)/${cert_name}.json
                
                # Store in Secrets Manager
                aws secretsmanager put-secret-value \
                  --secret-id "hotel-booking/certificates/${cert_name}" \
                  --secret-string file:///tmp/${cert_name}.json
              done
          restartPolicy: OnFailure