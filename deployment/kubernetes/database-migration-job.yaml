# Database Migration Job using Flyway
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyway-config
  namespace: hotel-booking-production
data:
  flyway.conf: |
    flyway.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    flyway.user=${DB_USER}
    flyway.password=${DB_PASSWORD}
    flyway.schemas=public,booking,users,payments
    flyway.table=schema_version
    flyway.baselineOnMigrate=true
    flyway.baselineVersion=1
    flyway.validateOnMigrate=true
    flyway.mixed=true
    flyway.group=true
    flyway.outOfOrder=false
    flyway.cleanDisabled=true
    flyway.installedBy=${DEPLOYED_BY}
---
# Pre-deployment database migration job
apiVersion: batch/v1
kind: Job
metadata:
  name: database-migration-${BUILD_ID}
  namespace: hotel-booking-production
  labels:
    app: hotel-booking
    component: database-migration
    version: ${VERSION}
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 600
  ttlSecondsAfterFinished: 86400  # Clean up after 24 hours
  template:
    metadata:
      labels:
        app: hotel-booking
        component: database-migration
        version: ${VERSION}
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: OnFailure
      serviceAccountName: database-migration-sa
      
      # Init container to wait for database
      initContainers:
      - name: wait-for-database
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z ${DB_HOST} ${DB_PORT}; do echo "Waiting for database..."; sleep 2; done']
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: port
      
      # Migration container
      containers:
      - name: flyway
        image: flyway/flyway:9-alpine
        command: ["flyway", "migrate"]
        env:
        - name: FLYWAY_CONFIG_FILES
          value: /flyway/conf/flyway.conf
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: port
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: DEPLOYED_BY
          value: "k8s-job-${BUILD_ID}"
        - name: ENVIRONMENT
          value: "production"
        - name: VERSION
          value: "${VERSION}"
        volumeMounts:
        - name: flyway-config
          mountPath: /flyway/conf
        - name: sql-migrations
          mountPath: /flyway/sql
        - name: migration-scripts
          mountPath: /flyway/scripts
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      
      # Post-migration validation container
      - name: validate-migration
        image: postgres:15-alpine
        command: ["/scripts/validate-migration.sh"]
        env:
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: host
        - name: PGPORT
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: port
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        volumeMounts:
        - name: validation-scripts
          mountPath: /scripts
      
      volumes:
      - name: flyway-config
        configMap:
          name: flyway-config
      - name: sql-migrations
        configMap:
          name: sql-migrations
      - name: migration-scripts
        configMap:
          name: migration-scripts
          defaultMode: 0755
      - name: validation-scripts
        configMap:
          name: validation-scripts
          defaultMode: 0755
---
# ServiceAccount for migration job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: database-migration-sa
  namespace: hotel-booking-production
---
# Role for migration job
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: database-migration-role
  namespace: hotel-booking-production
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: database-migration-rolebinding
  namespace: hotel-booking-production
subjects:
- kind: ServiceAccount
  name: database-migration-sa
  namespace: hotel-booking-production
roleRef:
  kind: Role
  name: database-migration-role
  apiGroup: rbac.authorization.k8s.io
---
# Migration validation scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: validation-scripts
  namespace: hotel-booking-production
data:
  validate-migration.sh: |
    #!/bin/bash
    set -e
    
    echo "Validating database migration..."
    
    # Check schema version table
    LATEST_VERSION=$(psql -t -c "SELECT version FROM schema_version ORDER BY installed_rank DESC LIMIT 1")
    echo "Latest migration version: $LATEST_VERSION"
    
    # Validate critical tables exist
    TABLES=("users" "hotels" "rooms" "bookings" "payments" "reviews")
    for table in "${TABLES[@]}"; do
      if ! psql -c "\dt $table" | grep -q "$table"; then
        echo "ERROR: Table $table does not exist!"
        exit 1
      fi
    done
    
    # Check for required indexes
    INDEXES=$(psql -t -c "SELECT indexname FROM pg_indexes WHERE schemaname = 'public'")
    echo "Found $(echo "$INDEXES" | wc -l) indexes"
    
    # Validate constraints
    CONSTRAINTS=$(psql -t -c "SELECT conname FROM pg_constraint WHERE contype IN ('p', 'f', 'u')")
    echo "Found $(echo "$CONSTRAINTS" | wc -l) constraints"
    
    # Run data integrity checks
    psql -c "SELECT COUNT(*) as orphaned_bookings FROM bookings b LEFT JOIN users u ON b.user_id = u.id WHERE u.id IS NULL"
    
    echo "Database migration validation completed successfully!"
---
# Rollback job template
apiVersion: v1
kind: ConfigMap
metadata:
  name: rollback-job-template
  namespace: hotel-booking-production
data:
  rollback-job.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: database-rollback-${BUILD_ID}
      namespace: hotel-booking-production
    spec:
      backoffLimit: 1
      activeDeadlineSeconds: 300
      template:
        spec:
          restartPolicy: Never
          serviceAccountName: database-migration-sa
          containers:
          - name: flyway-rollback
            image: flyway/flyway:9-alpine
            command: ["flyway", "undo"]
            env:
            - name: FLYWAY_CONFIG_FILES
              value: /flyway/conf/flyway.conf
            # ... (same env vars as migration job)
            volumeMounts:
            - name: flyway-config
              mountPath: /flyway/conf
            - name: sql-migrations
              mountPath: /flyway/sql
          volumes:
          - name: flyway-config
            configMap:
              name: flyway-config
          - name: sql-migrations
            configMap:
              name: sql-migrations